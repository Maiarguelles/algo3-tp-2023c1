Index: src/main/java/Repetition.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.time.DayOfWeek;\r\nimport java.time.LocalDateTime;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\n\r\npublic class Repetition {\r\n\r\n    private final FrequencyType frequencyType;\r\n    private final RepeatType repeatType;\r\n    private final int frequency;\r\n    private final int ocurrences;\r\n    private final ArrayList<DayOfWeek> weekDays;\r\n    private final LocalDateTime expirationDate;\r\n\r\n    public Repetition(FrequencyType frequencyType,int frequency, ArrayList<DayOfWeek> weekDays, int ocurrences){ //BY_OCURRENCES\r\n        this.repeatType = RepeatType.BY_OCURRENCES;\r\n        this.frequencyType = frequencyType;\r\n        this.frequency = frequency;\r\n        this.weekDays = weekDays;\r\n        this.ocurrences = ocurrences;\r\n        this.expirationDate = null;\r\n\r\n    }\r\n\r\n    public Repetition(FrequencyType frequencyType,int frequency, ArrayList<DayOfWeek> weekDays){ //INFINITE\r\n        this.repeatType = RepeatType.INFINITE;\r\n        this.frequencyType = frequencyType;\r\n        this.frequency = frequency;\r\n        this.weekDays = weekDays;\r\n        this.expirationDate = null;\r\n        this.ocurrences = 0;\r\n    }\r\n\r\n    public Repetition(FrequencyType frequencyType,int frequency, ArrayList<DayOfWeek> weekDays, LocalDateTime expirationDate){ //BY_DATE\r\n        this.repeatType = RepeatType.BY_DATE;\r\n        this.frequencyType = frequencyType;\r\n        this.frequency = frequency;\r\n        this.weekDays = weekDays;\r\n        this.ocurrences = 0;\r\n        this.expirationDate = expirationDate;\r\n    }\r\n\r\n\r\n\r\n\r\n    public enum FrequencyType{\r\n        DAILY,\r\n        WEEKLY,\r\n        MONTHLY,\r\n        YEARLY\r\n    }\r\n\r\n    public enum RepeatType{\r\n        INFINITE,\r\n        BY_OCURRENCES,\r\n        BY_DATE\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Repetition.java b/src/main/java/Repetition.java
--- a/src/main/java/Repetition.java	(revision 2d0fefabe42ed7e59625d9d147bfdf401cbf144c)
+++ b/src/main/java/Repetition.java	(date 1681473317805)
@@ -1,46 +1,19 @@
 import java.time.DayOfWeek;
+import java.time.LocalDate;
 import java.time.LocalDateTime;
 import java.util.ArrayList;
 import java.util.Date;
 
-public class Repetition {
-
-    private final FrequencyType frequencyType;
-    private final RepeatType repeatType;
-    private final int frequency;
-    private final int ocurrences;
-    private final ArrayList<DayOfWeek> weekDays;
-    private final LocalDateTime expirationDate;
+public abstract class  Repetition {
 
-    public Repetition(FrequencyType frequencyType,int frequency, ArrayList<DayOfWeek> weekDays, int ocurrences){ //BY_OCURRENCES
-        this.repeatType = RepeatType.BY_OCURRENCES;
-        this.frequencyType = frequencyType;
-        this.frequency = frequency;
-        this.weekDays = weekDays;
-        this.ocurrences = ocurrences;
-        this.expirationDate = null;
+    protected  FrequencyType frequencyType;
+    protected  int frequency;
+    protected  ArrayList<DayOfWeek> weekDays;
 
-    }
+    protected RepeatType repeatType;
 
-    public Repetition(FrequencyType frequencyType,int frequency, ArrayList<DayOfWeek> weekDays){ //INFINITE
-        this.repeatType = RepeatType.INFINITE;
-        this.frequencyType = frequencyType;
-        this.frequency = frequency;
-        this.weekDays = weekDays;
-        this.expirationDate = null;
-        this.ocurrences = 0;
-    }
 
-    public Repetition(FrequencyType frequencyType,int frequency, ArrayList<DayOfWeek> weekDays, LocalDateTime expirationDate){ //BY_DATE
-        this.repeatType = RepeatType.BY_DATE;
-        this.frequencyType = frequencyType;
-        this.frequency = frequency;
-        this.weekDays = weekDays;
-        this.ocurrences = 0;
-        this.expirationDate = expirationDate;
-    }
-
-
+    public abstract ArrayList<LocalDateTime> showDatesOfEvents(LocalDateTime startDate, LocalDateTime endDate); //da las fechas del evento entre el startDate y expirationDate
 
 
     public enum FrequencyType{
Index: src/main/java/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.time.LocalDateTime;\r\n\r\npublic class Main {\r\n    public static void main(String[] args){\r\n        var calendar = new Calendar();\r\n        var evento1 = new Event(\"algo3\", \"materia\", false, LocalDateTime.of(2023, 4, 15, 15, 0), 3, null);\r\n        var evento2 = new Event(\"algo2\", \"materia\", false,  LocalDateTime.of(2023, 4, 15, 15, 0), 3, null);\r\n\r\n        calendar.addEvent(evento1);\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Main.java b/src/main/java/Main.java
--- a/src/main/java/Main.java	(revision 2d0fefabe42ed7e59625d9d147bfdf401cbf144c)
+++ b/src/main/java/Main.java	(date 1681474273203)
@@ -1,3 +1,4 @@
+import java.time.LocalDate;
 import java.time.LocalDateTime;
 
 public class Main {
@@ -6,7 +7,19 @@
         var evento1 = new Event("algo3", "materia", false, LocalDateTime.of(2023, 4, 15, 15, 0), 3, null);
         var evento2 = new Event("algo2", "materia", false,  LocalDateTime.of(2023, 4, 15, 15, 0), 3, null);
 
-        calendar.addEvent(evento1);
+        LocalDateTime date0 =LocalDateTime.of(2023,7,3,10,30);
+        var z= date0.toLocalDate();
+
+        LocalDate date1 = LocalDate.of(2023,9,30);
+        LocalDate date2 = LocalDate.of(2023,8,1);
+        var x = z.until(date1);
+        var c = z.until(date2);
+        System.out.println(x.getDays());
+        System.out.println(x.getMonths());
+
+        System.out.println(c.getDays());
+        System.out.println(c.getMonths());
+
 
     }
 }
Index: src/main/java/Event.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.time.LocalDate;\r\nimport java.time.LocalDateTime;\r\nimport java.util.ArrayList;\r\n\r\npublic class Event {\r\n\r\n    private String title;\r\n    private String description;\r\n\r\n    private boolean completeDay; //si completeDay es true, la hora de inicio debe ser 00:00\r\n\r\n    public LocalDateTime getStartDate() {\r\n        return startDate;\r\n    }\r\n\r\n    private LocalDateTime startDate;\r\n\r\n    private int duration;\r\n\r\n    public Repetition getRepetition() {\r\n        return repetition;\r\n    }\r\n\r\n    private Repetition repetition;\r\n\r\n    private final ArrayList<Alarm> alarms;\r\n\r\n\r\n    public Event(String title, String description, boolean completeDay, LocalDateTime startDate, int duration, Repetition repetition) {\r\n        this.title = title;\r\n        this.description = description;\r\n        this.completeDay = completeDay;\r\n        this.startDate = startDate;\r\n        this.duration = duration;\r\n        this.repetition = repetition;\r\n        this.alarms = new ArrayList<Alarm>();\r\n    }\r\n\r\n    public ArrayList<Alarm> getAlarms(){\r\n        return alarms;\r\n    }\r\n    public void addAlarm(){}\r\n\r\n    public void removeAlarm(){}\r\n\r\n    public void setTitle(String title) {\r\n        this.title = title;\r\n    }\r\n\r\n    public void setDescription(String description) {\r\n        this.description = description;\r\n    }\r\n\r\n    public void setCompleteDay(boolean completeDay) {\r\n        this.completeDay = completeDay;\r\n    }\r\n\r\n    public void setStartDate(LocalDateTime startDate) {\r\n        this.startDate = startDate;\r\n    }\r\n\r\n    public void setDuration(int duration) {\r\n        this.duration = duration;\r\n    }\r\n\r\n    public void setRepetition(Repetition repetition) {\r\n        this.repetition = repetition;\r\n    }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Event.java b/src/main/java/Event.java
--- a/src/main/java/Event.java	(revision 2d0fefabe42ed7e59625d9d147bfdf401cbf144c)
+++ b/src/main/java/Event.java	(date 1681473317804)
@@ -4,6 +4,22 @@
 
 public class Event {
 
+    public String getTitle() {
+        return title;
+    }
+
+    public String getDescription() {
+        return description;
+    }
+
+    public boolean isCompleteDay() {
+        return completeDay;
+    }
+
+    public int getDuration() {
+        return duration;
+    }
+
     private String title;
     private String description;
 
@@ -34,6 +50,7 @@
         this.duration = duration;
         this.repetition = repetition;
         this.alarms = new ArrayList<Alarm>();
+
     }
 
     public ArrayList<Alarm> getAlarms(){
@@ -67,6 +84,10 @@
         this.repetition = repetition;
     }
 
+    public ArrayList<LocalDateTime> showDatesOfEvent(LocalDateTime startDate, LocalDateTime endDate){
+        return repetition.showDatesOfEvents(startDate, endDate);
+    }
+
 
 
 }
Index: src/main/java/UpToDateRepetition.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/UpToDateRepetition.java b/src/main/java/UpToDateRepetition.java
new file mode 100644
--- /dev/null	(date 1681473317806)
+++ b/src/main/java/UpToDateRepetition.java	(date 1681473317806)
@@ -0,0 +1,22 @@
+import java.time.DayOfWeek;
+import java.time.LocalDateTime;
+import java.util.ArrayList;
+
+public class UpToDateRepetition extends Repetition{
+    private final LocalDateTime expirationDate;
+
+    public UpToDateRepetition(FrequencyType frequencyType, int frequency, ArrayList<DayOfWeek> weekDays, LocalDateTime expirationDate){ //BY_DATE
+        this.repeatType = RepeatType.BY_DATE;
+        this.frequencyType = frequencyType;
+        this.frequency = frequency;
+        this.weekDays = weekDays;
+        this.expirationDate = expirationDate;
+    }
+
+    public ArrayList<LocalDateTime> showDatesOfEvents(LocalDateTime startDate, LocalDateTime endDate){
+        return null;
+    }
+
+
+
+}
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"d7a07a29-3160-4d52-8377-d0897e52492c\" name=\"Changes\" comment=\"Agrego las bases de todas las clases y algunos metodos\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Alarm.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Alarm.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Calendar.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Calendar.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Event.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Event.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Main.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Main.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Task.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Task.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n        <option value=\"JUnit4 Test Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">\r\n    <option name=\"selectedUrlAndAccountId\">\r\n      <UrlAndAccount>\r\n        <option name=\"accountId\" value=\"11b57802-555e-459a-b9bf-c71d297620c6\" />\r\n        <option name=\"url\" value=\"https://github.com/Maiarguelles/algo3-tp-2023c1.git\" />\r\n      </UrlAndAccount>\r\n    </option>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2O7SAvGwywLe6g42t4ADL4pC7FE\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary&quot;: &quot;JUnit4&quot;,\r\n    &quot;com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit4&quot;: &quot;&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/Mai/IdeaProjects/Biblioteca1&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CreateTestDialog.Recents.Supers\">\r\n      <recent name=\"\" />\r\n    </key>\r\n    <key name=\"CreateTestDialog.RecentsKey\">\r\n      <recent name=\"\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"d7a07a29-3160-4d52-8377-d0897e52492c\" name=\"Changes\" comment=\"\" />\r\n      <created>1680909990201</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1680909990201</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Creo el proyecto\">\r\n      <created>1680910310095</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680910310095</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Agrego las bases de todas las clases y algunos metodos\">\r\n      <created>1681330099894</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681330099894</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"3\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Creo el proyecto\" />\r\n    <MESSAGE value=\"Agrego las bases de todas las clases y algunos metodos\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Agrego las bases de todas las clases y algunos metodos\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 2d0fefabe42ed7e59625d9d147bfdf401cbf144c)
+++ b/.idea/workspace.xml	(date 1681473832373)
@@ -5,12 +5,14 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="d7a07a29-3160-4d52-8377-d0897e52492c" name="Changes" comment="Agrego las bases de todas las clases y algunos metodos">
+      <change afterPath="$PROJECT_DIR$/src/main/java/InfiniteRepetition.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/OcurrencesRepetition.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/UpToDateRepetition.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/Alarm.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Alarm.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/Calendar.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Calendar.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/Event.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Event.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Main.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/Task.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Task.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/Repetition.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Repetition.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
Index: src/main/java/InfiniteRepetition.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/InfiniteRepetition.java b/src/main/java/InfiniteRepetition.java
new file mode 100644
--- /dev/null	(date 1681473317805)
+++ b/src/main/java/InfiniteRepetition.java	(date 1681473317805)
@@ -0,0 +1,43 @@
+import java.time.DayOfWeek;
+import java.time.LocalDateTime;
+import java.util.ArrayList;
+
+public class InfiniteRepetition extends Repetition{
+    public InfiniteRepetition(FrequencyType frequencyType,int frequency, ArrayList<DayOfWeek> weekDays){ //INFINITE
+        this.repeatType = RepeatType.INFINITE;
+        this.frequencyType = frequencyType;
+        this.frequency = frequency;
+        this.weekDays = weekDays;
+    }
+
+    public ArrayList<LocalDateTime> showDatesOfEvents(LocalDateTime startDate, LocalDateTime endDate){ //startdate debe coincidir con una fecha del evento mismo
+        var dates = new ArrayList<LocalDateTime>();
+
+        if(frequencyType == FrequencyType.DAILY){
+            for(; startDate.isBefore(endDate); startDate.plusDays(frequency)){
+                dates.add(startDate);
+            }
+        }
+
+        if(frequencyType == FrequencyType.MONTHLY){
+            for(; startDate.isBefore(endDate); startDate.plusMonths(frequency)){
+                dates.add(startDate);
+            }
+        }
+
+        if(frequencyType == FrequencyType.YEARLY){
+            for(; startDate.isBefore(endDate); startDate.plusYears(frequency)){
+                dates.add(startDate);
+            }
+        }
+
+        if(frequencyType == FrequencyType.WEEKLY){
+            for(; startDate.isBefore(endDate); startDate.plusDays(1)){
+                if(weekDays.contains(startDate.getDayOfWeek()))
+                    dates.add(startDate);
+            }
+        }
+
+        return dates;
+    }
+}
Index: src/main/java/OcurrencesRepetition.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/OcurrencesRepetition.java b/src/main/java/OcurrencesRepetition.java
new file mode 100644
--- /dev/null	(date 1681473317805)
+++ b/src/main/java/OcurrencesRepetition.java	(date 1681473317805)
@@ -0,0 +1,21 @@
+import java.time.DayOfWeek;
+import java.time.LocalDateTime;
+import java.util.ArrayList;
+
+public class OcurrencesRepetition extends Repetition{
+    private final int ocurrences;
+
+    public OcurrencesRepetition(FrequencyType frequencyType, int frequency, ArrayList<DayOfWeek> weekDays, int ocurrences){ //BY_OCURRENCES
+        this.repeatType = RepeatType.BY_OCURRENCES;
+        this.frequencyType = frequencyType;
+        this.frequency = frequency;
+        this.weekDays = weekDays;
+        this.ocurrences = ocurrences;
+    }
+
+    public  ArrayList<LocalDateTime> showDatesOfEvents(LocalDateTime startDate, LocalDateTime endDate){
+        return null;
+    }
+
+
+}
Index: src/main/java/Calendar.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.net.InetSocketAddress;\r\nimport java.time.LocalDate;\r\nimport java.time.LocalDateTime;\r\nimport java.util.ArrayList;\r\nimport java.util.Timer;\r\n\r\npublic class Calendar {\r\n    private final ArrayList<Event> events;\r\n    private final ArrayList<Task> tasks;\r\n    private Alarm nextAlarm;\r\n    private final Timer timer;\r\n\r\n    public Calendar(){\r\n        events = new ArrayList<Event>();\r\n        tasks = new ArrayList<Task>();\r\n        timer = new Timer();\r\n        nextAlarm = null;\r\n    }\r\n\r\n    public void addEvent(Event event){\r\n        events.add((event));\r\n        var alarms = event.getAlarms();\r\n        if(alarms != null)\r\n            updateNextAlarm(event.getAlarms());\r\n    }\r\n\r\n    public void deleteEvent(Event event){\r\n        events.remove(event);\r\n    }\r\n\r\n    public void addTask(Task task){\r\n        tasks.add(task);\r\n    }\r\n\r\n    public void deleteTask(Task task){\r\n        tasks.remove(task);\r\n    }\r\n\r\n    private void updateNextAlarm(ArrayList<Alarm> alarms){\r\n        for(int i = 0; i < alarms.size(); i++){\r\n            var alarm = alarms.get(i);\r\n            if(nextAlarm.calculateGoOffTime().isAfter(alarm.calculateGoOffTime()))\r\n                nextAlarm = alarm;\r\n        }\r\n    }\r\n\r\n    private void sortEvents(){\r\n\r\n    }\r\n\r\n    public ArrayList<Event> showEvents(LocalDateTime date1, LocalDateTime date2){\r\n        var eventsToShow = new ArrayList<Event>();\r\n        for(int i = 0; i < events.size(); i++){\r\n            var event = events.get(i);\r\n            Repetition eventRepetition= event.getRepetition();\r\n            LocalDateTime eventStartDate = event.getStartDate();\r\n            if (eventStartDate.isAfter(date1)){\r\n                if (eventStartDate.getYear() == date1.getYear()){\r\n                    int eventDay = eventStartDate.getDayOfYear();\r\n                    int date1Day = date1.getDayOfYear();\r\n                }\r\n            }\r\n        }\r\n        return eventsToShow;\r\n    }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Calendar.java b/src/main/java/Calendar.java
--- a/src/main/java/Calendar.java	(revision 2d0fefabe42ed7e59625d9d147bfdf401cbf144c)
+++ b/src/main/java/Calendar.java	(date 1681474553833)
@@ -44,22 +44,22 @@
         }
     }
 
-    private void sortEvents(){
+    /*private void sortEvents(){
 
-    }
+    }*/
 
     public ArrayList<Event> showEvents(LocalDateTime date1, LocalDateTime date2){
         var eventsToShow = new ArrayList<Event>();
+        var dates = new ArrayList<LocalDateTime>();
+        Event event;
+        //sortEvents();
         for(int i = 0; i < events.size(); i++){
-            var event = events.get(i);
-            Repetition eventRepetition= event.getRepetition();
-            LocalDateTime eventStartDate = event.getStartDate();
-            if (eventStartDate.isAfter(date1)){
-                if (eventStartDate.getYear() == date1.getYear()){
-                    int eventDay = eventStartDate.getDayOfYear();
-                    int date1Day = date1.getDayOfYear();
-                }
+            event = events.get(i);
+            dates = event.showDatesOfEvent(date1, date2);
+            for(int j = 0; j < dates.size(); i++){
+                eventsToShow.add(new Event(event.getTitle(), event.getDescription(), event.isCompleteDay(), dates.get(j), event.getDuration(), null));
             }
+
         }
         return eventsToShow;
     }
